import org.gradle.internal.jvm.Jvm
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'java-library'
    id 'c'
}

group = 'de.rasmusantons'
version = '0.0.4'

def isWindows = Os.is(Os.FAMILY_WINDOWS)
def crossGcc = 'x86_64-w64-mingw32-gcc'
def canCrossCompile = file("/usr/bin/${crossGcc}").exists()

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

model {
    platforms {
        linux_x64 {
            operatingSystem 'linux'
            architecture "x86_64"
        }
        windows_x64 {
            operatingSystem 'windows'
            architecture "x86_64"
        }
    }

    toolChains {
        if (!isWindows && canCrossCompile) {
            mingw(Gcc) {
                target("windows_x64") {
                    cCompiler.executable crossGcc
                    linker.executable crossGcc
                }
            }
        }
    }

    components {
        cubiomes(NativeLibrarySpec) {
            if (!isWindows) {
                targetPlatform "linux_x64"
            }
            if (isWindows || canCrossCompile) {
                targetPlatform "windows_x64"
            }
            sources {
                c {
                    source {
                        srcDirs "src/cubiomes/c"
                        include "*.c"
                    }
                }
            }
            binaries.all {
                cCompiler.args '-O3'
                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-fPIC'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args '-D_WIN32'
                }
            }
        }

        cubij(NativeLibrarySpec) {
            if (!isWindows) {
                targetPlatform "linux_x64"
            }
            if (isWindows || canCrossCompile) {
            targetPlatform "windows_x64"
                }
            sources {
                c {
                    source {
                        lib project: ':', library: 'cubiomes', linkage: 'static'
                    }
                }
            }
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                cCompiler.args '-I', "${jvmHome}/include"
                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-fPIC'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args '-I', "${jvmHome}/include/win32"
                }
                cCompiler.args '-I', "${projectDir}/src/cubiomes/c"
                cCompiler.args '-O3'
            }
        }
    }
}

tasks.register('buildNativeLib', Copy) {
    group = "build"

    dependsOn(buildDependentsCubij)

    from layout.buildDirectory.dir('libs/cubij/shared').get()
    include 'libcubij.so', 'cubij.dll'
    from layout.buildDirectory.dir('libs/cubij/shared/linux_x64').get()
    include 'libcubij.so'
    from layout.buildDirectory.dir('libs/cubij/shared/windows_x64').get()
    include 'cubij.dll'
    into layout.projectDirectory.dir('src/main/resources')
}

tasks.register('genCHeaders', Exec) {
    group = "build"
    commandLine 'javac', '-h', 'src/cubij/c',
            'src/main/java/de/rasmusantons/cubiomes/BiomeID.java',
            'src/main/java/de/rasmusantons/cubiomes/Cubiomes.java',
            'src/main/java/de/rasmusantons/cubiomes/Dimension.java',
            'src/main/java/de/rasmusantons/cubiomes/MCVersion.java',
            'src/main/java/de/rasmusantons/cubiomes/NativeLibLoader.java',
            'src/main/java/de/rasmusantons/cubiomes/Range.java',
            'src/main/java/de/rasmusantons/cubiomes/Pos.java',
            'src/main/java/de/rasmusantons/cubiomes/Pos3.java',
            'src/main/java/de/rasmusantons/cubiomes/StructureType.java',
            'src/main/java/de/rasmusantons/cubiomes/BiomeFilter.java'
}

clean.doFirst {
    delete layout.projectDirectory.file('src/main/resources/libcubij.so')
}

processResources.dependsOn 'buildNativeLib'
classes.dependsOn 'buildNativeLib'

test {
    useJUnitPlatform()
}
